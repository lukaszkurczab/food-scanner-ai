#!/usr/bin/env node
// Node 18+
// Pobiera fonty przez Google Fonts API i zapisuje TTF do assets/fonts

import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const ROOT = path.resolve(__dirname, "..");
const FONTS_DIR = path.join(ROOT, "assets", "fonts");
const OUT_MAP = path.join(ROOT, "src", "utils", "loadFonts.generated.ts");

// === TU WPISZ SWÃ“J API KEY ===
const API_KEY = process.env.GOOGLE_FONTS_KEY;

// Popularne rodziny
const CONFIG = [
  { family: "Inter", weights: [300, 400, 500, 600, 700] },
  { family: "Roboto", weights: [300, 400, 500, 700] },
  { family: "Open Sans", weights: [300, 400, 600, 700] },
  { family: "Lato", weights: [300, 400, 700, 900] },
  { family: "Montserrat", weights: [300, 400, 600, 700] },
  { family: "Poppins", weights: [300, 400, 600, 700] },
  { family: "Nunito", weights: [300, 400, 600, 700] },
  { family: "Raleway", weights: [300, 400, 600, 700] },
  { family: "Ubuntu", weights: [300, 400, 500, 700] },
  { family: "Oswald", weights: [300, 400, 500, 700] },
  { family: "Work Sans", weights: [300, 400, 500, 700] },
  { family: "Rubik", weights: [300, 400, 500, 700] },
  { family: "Manrope", weights: [300, 400, 600, 700] },
  { family: "DM Sans", weights: [300, 400, 500, 700] },
  { family: "Merriweather", weights: [300, 400, 700, 900] },
  { family: "Playfair Display", weights: [400, 600, 700] },
];

async function ensureDir(dir) {
  await fs.mkdir(dir, { recursive: true });
}
async function exists(p) {
  try {
    await fs.access(p);
    return true;
  } catch {
    return false;
  }
}

async function fetchJSON(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status} ${url}`);
  return res.json();
}

async function downloadBuffer(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`HTTP ${res.status} ${url}`);
  return Buffer.from(await res.arrayBuffer());
}

async function main() {
  await ensureDir(FONTS_DIR);

  const collected = [];

  for (const { family, weights } of CONFIG) {
    console.log(`\n== ${family}`);
    const url = `https://www.googleapis.com/webfonts/v1/webfonts?key=${API_KEY}&sort=popularity`;
    const data = await fetchJSON(url);

    const font = data.items.find((i) => i.family === family);
    if (!font) {
      console.warn(`Not found in API: ${family}`);
      continue;
    }

    for (const w of weights) {
      const url = font.files[w] || font.files[`${w}`] || font.files[`regular`];
      if (!url) {
        console.warn(`No file for ${family} ${w}`);
        continue;
      }

      const filename = `${family.replace(/\s+/g, "")}-${w}.ttf`;
      const outPath = path.join(FONTS_DIR, filename);

      if (await exists(outPath)) {
        console.log(`SKIP ${family} ${w}`);
        collected.push({
          family,
          weight: w,
          relPath: `@/../assets/fonts/${filename}`,
        });
        continue;
      }

      try {
        const buf = await downloadBuffer(url);
        await fs.writeFile(outPath, buf);
        console.log(`OK   ${family} ${w}`);
        collected.push({
          family,
          weight: w,
          relPath: `@/../assets/fonts/${filename}`,
        });
      } catch (e) {
        console.warn(`FAIL ${family} ${w}: ${e.message}`);
      }
    }
  }

  const lines = [];
  lines.push(`// AUTO-GENERATED by scripts/download-fonts.mjs`);
  lines.push(`export const FONT_MAP: Record<string, any> = {`);
  for (const e of collected) {
    lines.push(`  "${e.family}-${e.weight}": require("${e.relPath}"),`);
  }
  lines.push(`};`);
  lines.push(`export type FontKey = keyof typeof FONT_MAP;`);
  await ensureDir(path.dirname(OUT_MAP));
  await fs.writeFile(OUT_MAP, lines.join("\n"), "utf8");

  console.log(
    `\nGenerated ${path.relative(ROOT, OUT_MAP)} with ${
      collected.length
    } entries.`
  );
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
